=======인증과 권한=======
django.contrib.auth
필수 구성은 settings.py에 이미 포함되어 있으며 INSTALLED_APPS에서 확인 가능

- Custom User Model로 대체하기
django에서 제공하는 기본 User Model은 인증 요구사항에서 적합하지 않을 수 있음
따라서 Custom user model로 만든다

# settings.py에 추가
# 내가 만든 앱의 User로 지정
AUTH_USER_MODEL = 'accounts.User'

# accounts/models.py 에 User 클래스 만들어서 지정
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    여기서 커스터마이징 하기

# accounts/admin.py에 커스텀 User 모델을 등록
(기본 User 모델이 아니기 때문에 등록하지 않으면 admin site에 출력 X)

from django.contrib.auth.admin import UserAdmin
from .models import User

admin.site.register(User, UserAdmin)

※※※[주의] 프로젝트 중간에 AUTH_USER_MODEL 변경을 하면 DB가 꼬인다
이럴땐 데이터베이스 초기화!!
1. migrations 파일 삭제
  - migrations 폴더 및 __init__.py는 삭제하지 않음
  - 번호가 붙은 파일만 삭제
2. db.sqlite3 삭제
3. migrations 다시 진행

======세션과 쿠키=========
# accounts/views.py
from django.contrib.auth.forms import AuthenticationForm => 로그인 폼이 있다

form = AuthenticationForm() 을 로그인 할때 넘겨주면 된다.
위젯으로 꾸미면 됨

def login(request):
    if request.method == 'POST':
        # 로그인 처리를 해줌
        form = AuthenticationForm(request, request.POST)
        if form.is_valid():
            auth_login(request, form.get_user())
            return redirect('articles:index')
    else:
        # 비어있는 로그인 페이지를 제공
        form = AuthenticationForm()

    context = {'form' : form}
    return render(request, 'accounts/login.html', context)

def logout(request):
    auth_logout(request)
    return redirect('articles:index')