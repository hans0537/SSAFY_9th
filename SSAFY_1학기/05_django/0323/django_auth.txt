1. 회원가입 구현

또 폼을 제공해준다...
그러나 주의 해야 할점! UserCreationForm은 우리가 대체한 커스텀 유저 모델이 아닌
기존 유저 모델로 인해 작성된 클래스이므로 custom으로 진행

# accounts/forms.py
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm, UserChangeForm

class CustomUserCreationForm(UserCreationForm):
    class Meta(UserCreationForm.Meta):
        # User기능은 전반적으로 많이 사용하므로 장고 내부에서 함수를 만들어줌
        # get_user_model()을 통해 알아서 settings.py 에 정의한 내가 쓸 User 클래스를 가져와
        # 이 부분만 변경해준다.
        model = get_user_model()

# accounts/views.py
CustomUserCreationForm()으로 대체하기

def signup(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            # 회원가입후 곧바로 로그인을 진행
            # save 메서드는 save를 한후 그 객체 반환
            auth_login(request, form.save())
            return redirect('articles:index')
    else:
        form = CustomUserCreationForm()
    
    context = {'form' : form}
    return render(request, 'accounts/signup.html', context)

2. 회원 탈퇴 로직
탈퇴 후에도 세션 정보를 삭제 해야 함으로

# accounts/views.py

def delete(request):
    auth_logout(request.user.delete())

3. 회원 정보 수정
기본 적으로 제공해주는 폼은 필드가 너무 많아서 필요한 부분만 제공해야 함

# accounts/forms.py

class CustomUserChangeForm(UserChangeForm):
    class Meta(UserChangeForm.Meta):
        model = get_user_model()
        # 필드를 지정해준다. 
        fields = ('username', 'email', 'first_name', 'last_name')

# accounts/views.py

def update(request):
    if request.method == 'POST':
        # 매개변수 주의
        form = CustomUserChangeForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            return redirect('articles:index')
    else:
        form = CustomUserChangeForm(instance=request.user)
    
    context = {'form' : form}
    return render(request, 'accounts/update.html', context)

4. 비밀번호 변경
회원정보 수정 페이지에서 기본적으로 비밀번호 변경으로 가는 기능이 있다.
form주소를 확인해서 urls에 적기. (.../password/)

※ 비밀 번호 변경시 로그인 상태가 지속 되지 않음
-> 비빌번호가 변경되면 기존 세션과의 회원 인증 정보가 일치하지 않아 끊겨버림
def change_password(request):
    if request.method == 'POST':
        form = PasswordChangeForm(request.user , request.POST)
        if form.is_valid():
            form.save()
            # 로그인 세션 업데이트
            update_session_auth_hash(request, form.user)
            return redirect('articles:index')
    else:
        form = PasswordChangeForm(request.user)
    
    context = {'form' : form}
    return render(request, 'accounts/change_password.html', context)


- View decorators

django.views.decorators.http 의 데코레이터를 사용하여 비정상 접근을 제어한다.
예) 링크로 post 요청 접근등...

# 데코레이터를 활용하여 POST만 접근 가능하게 함
@require_http_methods(['POST'])
def delete(request):

- is_authenticated 로그인 사용자에 대한 접근 제한

# HTML, Views에서 활용!!
request.user.is_authenticated 를 활용하여 로그인/비로그인 상태 판별 가능
